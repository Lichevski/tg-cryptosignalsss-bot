import asyncio
from os import getenv

import requests
from dotenv import load_dotenv
from telegram import Bot, KeyboardButton, ReplyKeyboardMarkup

load_dotenv()

TELEGRAM_BOT_TOKEN = getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = getenv("TELEGRAM_CHAT_ID")

if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    print("–û—à–∏–±–∫–∞: –ó–∞–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ")
    exit()

bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STABLE_COIN = "USDT"
LOOKBACK_MINUTES = 5
PRICE_CHANGE_THRESHOLD = 0.10

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
analysis_task = None
send_messages = False


def show_start_button(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
    markup.add(button)
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:", reply_markup=markup)


def show_stop_button(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
    markup.add(button)
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    show_start_button(message)


@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
def run_script(message):
    global send_messages, analysis_task

    if analysis_task and not analysis_task.done():
        bot.send_message(message.chat.id, "–°–∫—Ä–∏–ø—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return

    send_messages = True
    bot.send_message(message.chat.id, "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' –¥–ª—è –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    show_stop_button(message)

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    analysis_task = asyncio.create_task(main())


@bot.message_handler(func=lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
def stop_messages(message):
    global send_messages, analysis_task
    send_messages = False
    if analysis_task:
        analysis_task.cancel()
        analysis_task = None
    bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    show_start_button(message)


async def get_all_symbols():
    url = "https://api.mexc.com/api/v3/exchangeInfo"
    try:
        resp = requests.get(url)
        resp.raise_for_status()
        data = resp.json()
        symbols = [s['symbol'] for s in data['symbols'] if s['quoteAsset'] == STABLE_COIN]
        return symbols
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return []


def get_historical_close_prices(symbol, interval="1m", limit=LOOKBACK_MINUTES):
    url = f"https://api.mexc.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    try:
        resp = requests.get(url)
        resp.raise_for_status()
        data = resp.json()
        closes = [float(kline[4]) for kline in data]
        return closes
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        return None


def get_current_price(symbol):
    url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}"
    try:
        resp = requests.get(url)
        resp.raise_for_status()
        data = resp.json()
        return round(float(data['price']), 4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None


async def analyze_and_send_signal(symbol):
    closes = get_historical_close_prices(symbol)
    if not closes or len(closes) < 2:
        print(f"[{symbol}] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    oldest_price = closes[0]
    current_price = get_current_price(symbol)
    if not current_price:
        print(f"[{symbol}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
        return

    price_change = (current_price - oldest_price) / oldest_price
    percent_change = price_change * 100

    print(f"[{symbol}] –°—Ç–∞—Ä–æ–µ: {oldest_price:.4f}, –¢–µ–∫—É—â–µ–µ: {current_price:.4f}, –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {percent_change:.2f}%")

    if abs(price_change) >= PRICE_CHANGE_THRESHOLD:
        if price_change > 0:
            message = f"üìä LONG –¥–ª—è {symbol}! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {current_price}. –†–æ—Å—Ç –Ω–∞ {percent_change:.2f}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {LOOKBACK_MINUTES} –º–∏–Ω—É—Ç."
        else:
            message = f"üìä SHORT –¥–ª—è {symbol}! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {current_price}. –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ {abs(percent_change):.2f}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {LOOKBACK_MINUTES} –º–∏–Ω—É—Ç."

        await send_message(message)


async def main():
    global send_messages
    symbols = await get_all_symbols()
    try:
        while send_messages:
            for symbol in symbols:
                await analyze_and_send_signal(symbol)
            await asyncio.sleep(60)
    except asyncio.CancelledError:
        print("–ó–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def send_message(message):
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run_bot():
    while True:
        try:
            await bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
            await asyncio.sleep(5)


def run():
    pass


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞: –±–æ—Ç –∏ –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞
    asyncio.run(run())


async def run():
    # –°–æ–∑–¥–∞—ë–º —Ç–∞—Å–∫ –¥–ª—è –±–æ—Ç–∞
    bot_task = asyncio.create_task(run_bot())
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        await asyncio.sleep(1)