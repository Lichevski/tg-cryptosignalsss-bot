import asyncio
import requests
from os import getenv

from dotenv import load_dotenv
from telegram import Bot, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TELEGRAM_BOT_TOKEN = getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = getenv("TELEGRAM_CHAT_ID")

if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    print("‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Å–æ–¥–µ—Ä–∂–∏—Ç TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID")
    exit()

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
STABLE_COIN = "USDT"
LOOKBACK_MINUTES = 5
PRICE_CHANGE_THRESHOLD = 0.10  # 10%
analysis_task = None
send_messages = False
bot = Bot(token=TELEGRAM_BOT_TOKEN)


# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_keyboard(start=True):
    button_text = "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑" if start else "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
    keyboard = [[KeyboardButton(button_text)]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—ÇüòÅ! –≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –Ω–∞ –±–∏—Ä–∂–µ MEXC. –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 10%, –±–æ—Ç —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–± —ç—Ç–æ–º! –°–æ–∑–¥–∞—Ç–µ–ª—å @Lich_disciplineüí∏.",
        reply_markup=get_keyboard(start=True)
    )


# === –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ ===
async def run_script(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global send_messages, analysis_task

    if analysis_task and not analysis_task.done():
        await update.message.reply_text("–ê–Ω–∞–ª–∏–∑ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –±—Ä–∞—Ç:)")
        return

    send_messages = True
    await update.message.reply_text(
        "‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑' –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.",
        reply_markup=get_keyboard(start=False)
    )

    analysis_task = asyncio.create_task(analyze_loop())


# === –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ===
async def stop_script(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global send_messages, analysis_task
    send_messages = False

    if analysis_task:
        analysis_task.cancel()
        analysis_task = None

    await update.message.reply_text(
        "‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=get_keyboard(start=True)
    )


# === –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å USDT ===
async def get_all_symbols():
    url = "https://api.mexc.com/api/v3/exchangeInfo"
    try:
        resp = requests.get(url)
        resp.raise_for_status()
        data = resp.json()
        return [s['symbol'] for s in data['symbols'] if s['quoteAsset'] == STABLE_COIN]
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤] {e}")
        return []


# === –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è ===
def get_historical_closes(symbol, interval="1m", limit=LOOKBACK_MINUTES):
    url = f"https://api.mexc.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    try:
        resp = requests.get(url)
        resp.raise_for_status()
        data = resp.json()
        return [float(kline[4]) for kline in data]
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ {symbol}] {e}")
        return None


# === –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ===
def get_current_price(symbol):
    url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}"
    try:
        resp = requests.get(url)
        resp.raise_for_status()
        return round(float(resp.json()['price']), 4)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ —Ü–µ–Ω—ã {symbol}] {e}")
        return None


# === –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ ===
async def analyze_and_alert(symbol):
    closes = get_historical_closes(symbol)
    if not closes or len(closes) < 2:
        return

    start_price = closes[0]
    current_price = get_current_price(symbol)
    if not current_price:
        return

    change = (current_price - start_price) / start_price
    percent = change * 100

    if abs(change) >= PRICE_CHANGE_THRESHOLD:
        trend = "üìà LONG" if change > 0 else "üìâ SHORT"
        msg = (
            f"{trend} —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}\n"
            f"–¶–µ–Ω–∞: {current_price} ({percent:.2f}%) –∑–∞ {LOOKBACK_MINUTES} –º–∏–Ω."
        )
        await send_alert(msg)


# === –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ ===
async def analyze_loop():
    global send_messages
    symbols = await get_all_symbols()

    try:
        while send_messages:
            for symbol in symbols:
                await analyze_and_alert(symbol)
            await asyncio.sleep(60)
    except asyncio.CancelledError:
        print("[–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]")


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ===
async def send_alert(text):
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
        print(f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ] {text}")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏] {e}")


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
async def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"), run_script))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑"), stop_script))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã.")
    await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())